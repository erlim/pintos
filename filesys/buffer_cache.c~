#include "filesys/buffer_cache.h"

#define BUFFER_CACHE_ENTRY_NB 64
void* buffer_cache;
struct buffer_head[BUFFER_CACHE_ENTRY_NB];
static int clock_hand;

bool 
bc_read (block_sector_t sector_idx, void *buffer, off_t bytes_read, int chunk_size, int sector_ofs)
{
  struct buffer_head *bufe = bc_lookup(sector_idx);
  if(bufe == NULL) 
  {
    bufe = bc_select_victim();
    if(bufe == NULL)
      return false;
    lock_acquire(&bufe);
    block_read(fs_device, sector_idx, bufe->data);
    bufe->dirty = false;
    bufe->access = true;
    bufe->sector = sector_idx;
    lock_release(&bufe->lock);
  }
  lock_acquire(&bufe->lock);
  memcpy(buffer + bytes_read, bufe->data + sector_ofs, chunk_size);
  bufe->clock_bit = true;

  return true;
}

bool 
bc_write (block_sector_t sector_idx, void *buffer, off_t bytes_written, int chunk_size, int sector_ofs)
{
    struct buffer_entry *bufe = bc_lookup(sector_idx);

    if(bufe == NULL) 
    {
        bufe = bc_select_victim();
        if (bufe == NULL)
            return false;
        block_read(fs_device, sector_idx, bufe->data);
    }
    lock_acquire(&bufe->lock);
    memcpy(bufe->data + sector_ofs, buffer + bytes_written, chunk_size);
    bufe->dirty = true;
    bufe->access = true;
    bufe->sector = sector_idx;
    bufe->clock_bit = true;
    lock_release(&bufe->lock);
    
    return true;
}

