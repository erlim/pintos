!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
DEPENDS	build/Makefile	/^DEPENDS = $(patsubst %.o,%.d,$(OBJECTS))$/;"	m
OBJECTS	build/Makefile	/^OBJECTS = $(patsubst %.c,%.o,$(patsubst %.S,%.o,$(SOURCES)))$/;"	m
PG_SECTOR_CNT	swap.c	18;"	d	file:
SOURCES	build/Makefile	/^SOURCES = $(foreach dir,$(KERNEL_SUBDIRS),$($(dir)_SRC))$/;"	m
SRCDIR	build/Makefile	/^SRCDIR = ..\/..$/;"	m
VM_FRAME_H	frame.h	2;"	d
VM_MMAP_H	mmap.h	2;"	d
VM_PAGE_H	page.h	2;"	d
VM_SAWP_H	swap.h	2;"	d
_end	build/threads/kernel.lds.s	/^  _end = .;$/;"	d
_end_bss	build/threads/kernel.lds.s	/^  _end_bss = .;$/;"	d
_end_kernel_text	build/threads/kernel.lds.s	/^       _end_kernel_text = .; }$/;"	d
_signature	build/threads/kernel.lds.s	/^     _signature = .; LONG(0xaa55aa55) }$/;"	d
_start	build/threads/kernel.lds.s	/^  _start = 0xc0000000 + 0x20000;$/;"	d
_start_bss	build/threads/kernel.lds.s	/^  _start_bss = .;$/;"	d
allocate_mapid	mmap.c	/^allocate_mapid(void)$/;"	f	file:
bLoad	page.h	/^  bool bLoad;$/;"	m	struct:vm_entry
bPin	page.h	/^  bool bPin;  \/\/?????????$/;"	m	struct:vm_entry
bitmap_swap	swap.c	/^struct bitmap *bitmap_swap;$/;"	v	typeref:struct:bitmap
block_swap	swap.c	/^struct block *block_swap;$/;"	v	typeref:struct:block
check_is_mmaped	mmap.c	/^check_is_mmaped(void *addr)$/;"	f	file:
devices_SRC	build/Makefile	/^devices_SRC  = devices\/pit.c		# Programmable interrupt timer chip.$/;"	m
do_mmap	mmap.c	/^do_mmap(int fd, void *addr)$/;"	f
do_munmap	mmap.c	/^do_munmap(int mapping)$/;"	f
elem	mmap.h	/^  struct list_elem elem;$/;"	m	struct:mmap_file	typeref:struct:mmap_file::list_elem
elem	page.h	/^  struct hash_elem elem;$/;"	m	struct:vm_entry	typeref:struct:vm_entry::hash_elem
file	mmap.h	/^  struct file* file;$/;"	m	struct:mmap_file	typeref:struct:mmap_file::file
file	page.h	/^  struct file *file;$/;"	m	struct:vm_entry	typeref:struct:vm_entry::file
filesys_SRC	build/Makefile	/^filesys_SRC  = filesys\/filesys.c	# Filesystem core.$/;"	m
id	mmap.h	/^  int id;$/;"	m	struct:mmap_file
id	page.h	/^  int id;$/;"	m	struct:vm_entry
kaddr	page.h	/^  void *kaddr;$/;"	m	struct:page
kernel_SRC	build/Makefile	/^lib\/kernel_SRC  = lib\/kernel\/debug.c	# Debug helpers.$/;"	m
lib_SRC	build/Makefile	/^lib_SRC  = lib\/debug.c			# Debug helpers.$/;"	m
lock_file	mmap.c	/^static struct lock lock_file;$/;"	v	typeref:struct:lock	file:
lock_file	page.c	/^struct lock lock_file;$/;"	v	typeref:struct:lock
lock_file	swap.c	/^struct lock lock_file;$/;"	v	typeref:struct:lock
lock_mapid	mmap.c	/^static struct lock lock_mapid;$/;"	v	typeref:struct:lock	file:
lru_elem	page.h	/^  struct list_elem lru_elem;$/;"	m	struct:page	typeref:struct:page::list_elem
mapid_t	mmap.c	/^typedef int mapid_t;$/;"	t	file:
mmap_elem	page.h	/^  struct list_elem mmap_elem; \/\/map_file$/;"	m	struct:vm_entry	typeref:struct:vm_entry::list_elem
mmap_file	mmap.h	/^struct mmap_file$/;"	s
mmap_init	mmap.c	/^mmap_init(void)$/;"	f
offset	page.h	/^  size_t offset;$/;"	m	struct:vm_entry
page	page.h	/^struct page$/;"	s
page_alloc	page.c	/^page_alloc(int flags)\/\/enum palloc_flags flags)$/;"	f
page_free	page.c	/^page_free(void *kaddr)$/;"	f
page_init	page.c	/^page_init()$/;"	f
read_bytes	page.h	/^  size_t read_bytes;$/;"	m	struct:vm_entry
swap_destroy	swap.c	/^swap_destroy(void)$/;"	f
swap_in	swap.c	/^swap_in(size_t slot_idx, void *kaddr)$/;"	f
swap_init	swap.c	/^swap_init()$/;"	f
swap_out	swap.c	/^swap_out(void*kaddr)$/;"	f
swap_slot	page.h	/^  size_t swap_slot;$/;"	m	struct:vm_entry
thread	page.h	/^  struct thread *thread;$/;"	m	struct:page	typeref:struct:page::thread
threads_SRC	build/Makefile	/^threads_SRC  = threads\/start.S		# Startup code.$/;"	m
type	page.h	/^  uint8_t type;$/;"	m	struct:vm_entry
userprog_SRC	build/Makefile	/^userprog_SRC  = userprog\/process.c	# Process loading.$/;"	m
vaddr	page.h	/^  void *vaddr;$/;"	m	struct:vm_entry
vm_SRC	build/Makefile	/^vm_SRC = vm\/page.c                # Page$/;"	m
vm_destroy	page.c	/^vm_destroy(struct hash *vm)$/;"	f
vm_destroy_func	page.c	/^vm_destroy_func(struct hash_elem *e, void *aux UNUSED)$/;"	f	file:
vm_entry	page.h	/^struct vm_entry$/;"	s
vm_hash_func	page.c	/^vm_hash_func(const struct hash_elem *e, void *aux UNUSED)$/;"	f	file:
vm_init	page.c	/^vm_init(struct hash *vm)$/;"	f
vm_less_func	page.c	/^vm_less_func(const struct hash_elem *lhs, const struct hash_elem *rhs, void *aux UNUSED)$/;"	f	file:
vme	page.h	/^  struct vm_entry *vme;$/;"	m	struct:page	typeref:struct:page::vm_entry
vme_find	page.c	/^vme_find(void *vaddr)$/;"	f
vme_insert	page.c	/^vme_insert(struct hash *vm, struct vm_entry *vme)$/;"	f
vme_remove	page.c	/^vme_remove(struct hash *vm, struct vm_entry *vme)$/;"	f
vmes	mmap.h	/^  struct list vmes;$/;"	m	struct:mmap_file	typeref:struct:mmap_file::list
writable	page.h	/^  bool writable;$/;"	m	struct:vm_entry
zero_bytes	page.h	/^  size_t zero_bytes;$/;"	m	struct:vm_entry
